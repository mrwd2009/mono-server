"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2858],{2858:(e,t,s)=>{s.r(t),s.d(t,{default:()=>v}),s(5623);var o=s(710),a=s(5863),n=s(3802),r=s(1677),l=s(8798),i=s(9176),c=s(1576),m=s(8336),d=s(764),u=s(4326),f=s(1786);const P=({handleModalToggle:e,save:t})=>{const{t:s}=(0,n.$G)("sessions"),{addAlert:r}=(0,u.Z7)(),{realm:i}=(0,d.PL)(),{adminClient:P}=(0,l.K3)(),{register:g,handleSubmit:p,formState:{errors:v}}=(0,c.cI)(),[y,E]=(0,a.eJ)(),[h,w]=(0,a.eJ)(0),Z=()=>{w((new Date).getTime())};(0,l.ib)((()=>P.realms.findOne({realm:i})),(e=>{E(e)}),[h]);return a.ZP.createElement(o.u_,{variant:o.vE.small,title:s("revocation"),isOpen:!0,onClose:e,actions:[a.ZP.createElement(o.zx,{"data-testid":"set-to-now-button",key:"set-to-now",variant:"tertiary",onClick:()=>{(async()=>{try{await P.realms.update({realm:i},{realm:i,notBefore:Date.now()/1e3}),r(s("notBeforeSuccess"),o.Ux.success)}catch(e){r(s("setToNowError",{error:e}),o.Ux.danger)}})(),e()},form:"revocation-modal-form"},s("setToNow")),a.ZP.createElement(o.zx,{"data-testid":"clear-not-before-button",key:"clear",variant:"tertiary",onClick:()=>{(async()=>{try{await P.realms.update({realm:i},{realm:i,notBefore:0}),r(s("notBeforeClearedSuccess"),o.Ux.success),Z()}catch(e){r(s("notBeforeError",{error:e}),o.Ux.danger)}})(),e()},form:"revocation-modal-form"},s("clear")),a.ZP.createElement(o.zx,{"data-testid":"modal-test-connection-button",key:"push",variant:"secondary",onClick:()=>{(async()=>{((e,t)=>{const a=e.successRequests?.length||0,n=e.failedRequests?.length||0;0===a&&0===n?r(s("clients:noAdminUrlSet"),o.Ux.warning):n>0?(r(s("clients:notBeforePushSuccess",{successNodes:e.successRequests}),o.Ux.success),r(s("clients:notBeforePushFail",{failedNodes:e.failedRequests}),o.Ux.danger)):r(s("clients:notBeforePushSuccess",{successNodes:e.successRequests}),o.Ux.success)})(await P.realms.pushRevocation({realm:i})),Z()})(),e()},form:"revocation-modal-form"},s("push")),a.ZP.createElement(o.zx,{id:"modal-cancel","data-testid":"cancel",key:"cancel",variant:o.Wu.link,onClick:()=>{e()}},s("common:cancel"))]},a.ZP.createElement(o.wu,{className:"kc-revocation-description-text"},s("revocationDescription")),a.ZP.createElement(o.l0,{id:"revocation-modal-form",isHorizontal:!0,onSubmit:p(t)},a.ZP.createElement(o.cw,{className:"kc-revocation-modal-form-group",label:s("notBefore"),name:"notBefore",fieldId:"not-before",validated:v.email?o.LD.error:o.LD.default},a.ZP.createElement(f.F,{"data-testid":"not-before-input",ref:g({required:!0,pattern:m.E9}),autoFocus:!0,isReadOnly:!0,value:0===y?.notBefore?s("none"):new Date(1e3*y?.notBefore).toString(),type:"text",id:"not-before",name:"notBefore",validated:v.email?o.LD.error:o.LD.default}))))};var g=s(7174),p=s(9766);function v(){const{t:e}=(0,n.$G)("sessions"),{keycloak:t,adminClient:s}=(0,l.K3)(),{addError:c}=(0,u.Z7)(),{realm:m}=(0,d.PL)(),[f,v]=(0,a.eJ)(!1),[y,E]=(0,a.eJ)([]),[h,w]=(0,a.eJ)(!1),Z=()=>{v(!f)},[k,b]=(0,p.W)({titleKey:"sessions:logoutAllSessions",messageKey:"sessions:logoutAllDescription",continueButtonLabel:"common:confirm",onConfirm:async()=>{try{await s.realms.logoutAll({realm:m}),t.logout({redirectUri:""})}catch(e){c("sessions:logoutAllSessionsError",e)}}}),x=[a.ZP.createElement(o.hP,{key:"toggle-modal","data-testid":"revocation",component:"button",onClick:()=>Z()},e("revocation")),a.ZP.createElement(o.hP,{key:"delete-role","data-testid":"logout-all",component:"button",isDisabled:h,onClick:k},e("signOutAllActiveSessions"))];return a.ZP.createElement(a.ZP.Fragment,null,a.ZP.createElement(b,null),a.ZP.createElement(r.t,{dropdownItems:x,titleKey:"sessions:title",subKey:"sessions:sessionExplain",helpUrl:i.Z.sessionsUrl}),a.ZP.createElement(o.NP,{variant:"light",className:"pf-u-p-0"},f&&a.ZP.createElement(P,{handleModalToggle:Z,activeClients:y,save:()=>{Z()}}),a.ZP.createElement(g.Z,{loader:async()=>{const e=await s.sessions.find(),t=(await Promise.all(e.map((e=>s.clients.listSessions({id:e.id}))))).flat();w(0===t.length);const o=(await s.clients.find()).filter((t=>e.map((e=>e.id)).includes(t.id)));E(o);const a=Array.from(new Set(t.map((e=>e.userId))));return(await Promise.all(a.map((e=>s.users.listSessions({id:e}))))).flat()}})))}}}]);