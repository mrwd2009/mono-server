"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1493],{1493:(e,t,r)=>{r.r(t),r.d(t,{default:()=>b});var a=r(5863),i=r(2954),n=r(3802),l=r(1576),o=r(710),d=r(4839),c=r(1677),s=r(8798),m=r(8790),p=r(386),v=r(2190),y=r(764),u=r(8051),E=r(9886),P=r(8336);const f=()=>{const{t:e}=(0,n.$G)("identity-providers"),{adminClient:t}=(0,s.K3)(),{realm:r}=(0,y.PL)(),{setValue:i,setError:d,clearErrors:c,formState:{errors:m}}=(0,l.Gc)();return a.ZP.createElement(a.ZP.Fragment,null,a.ZP.createElement(o.Dx,{headingLevel:"h4",size:"xl",className:"kc-form-panel__title"},e("oidcSettings")),a.ZP.createElement(E.V,{id:"oidc",fileUpload:a.ZP.createElement(o.cw,{label:e("importConfig"),fieldId:"kc-import-config",labelIcon:a.ZP.createElement(p.B,{helpText:"identity-providers-help:importConfig",fieldLabelId:"identity-providers:importConfig"}),validated:m.discoveryError?"error":"default",helperTextInvalid:m.discoveryError?.message},a.ZP.createElement(v.K,{id:"kc-import-config",helpText:"identity=providers-help:jsonFileUpload",hideDefaultPreview:!0,unWrap:!0,validated:m.discoveryError?"error":"default",onChange:e=>(async e=>{if(c("discoveryError"),!e)return;const a=new FormData;a.append("providerId","oidc"),a.append("file",new Blob([JSON.stringify(e)]));try{const e=await fetch(`${(0,P.mi)(t.baseUrl)}admin/realms/${r}/identity-provider/import-config`,{method:"POST",body:a,headers:{Authorization:`Bearer ${await t.getAccessToken()}`}});e.ok?(n=await e.json(),Object.keys(n).map((e=>i(`config.${e}`,n[e])))):d("discoveryError",{type:"manual",message:e.statusText})}catch(e){d("discoveryError",{type:"manual",message:e.message})}var n})(e)}))},(e=>a.ZP.createElement(u.Y,{readOnly:e}))))};var h=r(4403),Z=r(4326),g=r(5309),k=r(5012);function b(){const{t:e}=(0,n.$G)("identity-providers"),t=(0,i.k6)(),{url:r}=(0,i.$B)(),p=r.endsWith("keycloak-oidc"),v=(p?"keycloak-":"")+"oidc",u=(0,l.cI)({defaultValues:{alias:v}}),{handleSubmit:E,formState:{isDirty:P}}=u,{adminClient:b}=(0,s.K3)(),{addAlert:w,addError:I}=(0,Z.Z7)(),{realm:x}=(0,y.PL)();return a.ZP.createElement(a.ZP.Fragment,null,a.ZP.createElement(c.t,{titleKey:e(p?"addKeycloakOpenIdProvider":"addOpenIdProvider")}),a.ZP.createElement(o.NP,{variant:"light"},a.ZP.createElement(l.RV,{...u},a.ZP.createElement(d.N,{role:"manage-identity-providers",isHorizontal:!0,onSubmit:E((async r=>{delete r.discoveryEndpoint;try{await b.identityProviders.create({...r,providerId:v}),w(e("createSuccess"),o.Ux.success),t.push((0,g.Q)({realm:x,providerId:v,alias:r.alias,tab:"settings"}))}catch(e){I("identity-providers:createError",e)}}))},a.ZP.createElement(m.h,{id:v}),a.ZP.createElement(f,null),a.ZP.createElement(h.Z,null),a.ZP.createElement(o.WK,null,a.ZP.createElement(o.zx,{isDisabled:!P,variant:"primary",type:"submit","data-testid":"createProvider"},e("common:add")),a.ZP.createElement(o.zx,{variant:"link","data-testid":"cancel",component:e=>a.ZP.createElement(i.rU,{...e,to:(0,k.A)({realm:x})})},e("common:cancel")))))))}}}]);