"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4788],{4788:(e,r,t)=>{t.r(r),t.d(r,{default:()=>x});var a=t(5863),i=t(2954),n=t(3802),l=t(1576),d=t(710),o=t(4839),c=t(1677),s=t(8798),m=t(4615),v=t(386),p=t(2571),u=t(764),y=t(8997),E=t(9886),P=t(1786),f=t(5256),g=t(8336);const Z=()=>{const{t:e}=(0,n.$G)("identity-providers"),{adminClient:r}=(0,s.K3)(),{realm:t}=(0,u.PL)(),{setValue:i,register:o,setError:c,clearErrors:m,formState:{errors:Z}}=(0,l.Gc)();return a.ZP.createElement(a.ZP.Fragment,null,a.ZP.createElement(d.Dx,{headingLevel:"h4",size:"xl",className:"kc-form-panel__title"},e("samlSettings")),a.ZP.createElement(d.cw,{label:e("serviceProviderEntityId"),fieldId:"kc-service-provider-entity-id",labelIcon:a.ZP.createElement(v.B,{helpText:"identity-providers-help:serviceProviderEntityId",fieldLabelId:"identity-providers:serviceProviderEntityId"}),isRequired:!0,helperTextInvalid:e("common:required"),validated:Z.config?.entityId?"error":"default"},a.ZP.createElement(P.F,{type:"text",name:"config.entityId","data-testid":"serviceProviderEntityId",id:"kc-service-provider-entity-id",ref:o({required:!0}),validated:Z.config?.entityId?"error":"default",defaultValue:`${f.Z.authServerUrl}/realms/${t}`})),a.ZP.createElement(E.V,{id:"saml",fileUpload:a.ZP.createElement(d.cw,{label:e("importConfig"),fieldId:"kc-import-config",labelIcon:a.ZP.createElement(v.B,{helpText:"identity-providers-help:importConfig",fieldLabelId:"identity-providers:importConfig"}),validated:Z.discoveryError?"error":"default",helperTextInvalid:Z.discoveryError?.message},a.ZP.createElement(p.n,{id:"kc-import-config",extension:".xml",hideDefaultPreview:!0,unWrap:!0,validated:Z.discoveryError?"error":"default",onChange:e=>(async e=>{if(m("discoveryError"),!e)return;const a=new FormData;a.append("providerId","saml"),a.append("file",new Blob([e]));try{const e=await fetch(`${(0,g.mi)(r.baseUrl)}admin/realms/${t}/identity-provider/import-config`,{method:"POST",body:a,headers:{Authorization:`bearer ${await r.getAccessToken()}`}});e.ok?(n=await e.json(),Object.entries(n).map((([e,r])=>i(`config.${e}`,r)))):c("discoveryError",{type:"manual",message:e.statusText})}catch(e){c("discoveryError",{type:"manual",message:e.message})}var n})(e)}))},(e=>a.ZP.createElement(y.X,{readOnly:e}))))};var h=t(4326),I=t(5309),b=t(5012);function x(){const{t:e}=(0,n.$G)("identity-providers"),r=(0,i.k6)(),t="saml",v=(0,l.cI)({defaultValues:{alias:t,config:{allowCreate:"true"}}}),{handleSubmit:p,formState:{isDirty:y}}=v,{adminClient:E}=(0,s.K3)(),{addAlert:P}=(0,h.Z7)(),{realm:f}=(0,u.PL)();return a.ZP.createElement(a.ZP.Fragment,null,a.ZP.createElement(c.t,{titleKey:e("addSamlProvider")}),a.ZP.createElement(d.NP,{variant:"light"},a.ZP.createElement(l.RV,{...v},a.ZP.createElement(o.N,{role:"manage-identity-providers",isHorizontal:!0,onSubmit:p((async a=>{delete a.discoveryEndpoint;try{await E.identityProviders.create({...a,providerId:t}),P(e("createSuccess"),d.Ux.success),r.push((0,I.Q)({realm:f,providerId:t,alias:a.alias,tab:"settings"}))}catch(r){P(e("createError",{error:r.response?.data?.errorMessage||r}),d.Ux.danger)}}))},a.ZP.createElement(m.D,{id:t}),a.ZP.createElement(Z,null),a.ZP.createElement(d.WK,null,a.ZP.createElement(d.zx,{isDisabled:!y,variant:"primary",type:"submit","data-testid":"createProvider"},e("common:add")),a.ZP.createElement(d.zx,{variant:"link","data-testid":"cancel",component:e=>a.ZP.createElement(i.rU,{...e,to:(0,b.A)({realm:f})})},e("common:cancel")))))))}}}]);