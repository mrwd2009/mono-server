"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4062],{4062:(e,t,a)=>{a.r(t),a.d(t,{default:()=>h});var r=a(5863),i=a(2954),n=a(3802),d=a(1576),l=a(710),s=a(764),p=a(1677),o=a(4839),c=a(8798),m=a(4326),u=a(8802),y=a(8336),v=a(5309),P=a(386),f=a(1786);const g=({mapperTypes:e,mapperType:t,form:a,id:i,updateMapperType:s})=>{const{t:p}=(0,n.$G)("identity-providers"),{control:o,register:c,errors:m}=a,[u,y]=(0,r.eJ)(!1),v=["inherit","import","legacy","force"],[g,E]=(0,r.eJ)(!1);return r.ZP.createElement(r.ZP.Fragment,null,r.ZP.createElement(l.cw,{label:p("common:name"),labelIcon:r.ZP.createElement(P.B,{helpText:"identity-providers-help:addIdpMapperName",fieldLabelId:"name"}),fieldId:"kc-name",isRequired:!0,validated:m.name?l.LD.error:l.LD.default,helperTextInvalid:p("common:required")},r.ZP.createElement(f.F,{ref:c({required:!0}),type:"text","datatest-id":"name-input",id:"kc-name",name:"name",isDisabled:!!i,validated:m.name?l.LD.error:l.LD.default})),r.ZP.createElement(l.cw,{label:p("syncModeOverride"),isRequired:!0,labelIcon:r.ZP.createElement(P.B,{helpText:"identity-providers-help:syncModeOverride",fieldLabelId:"identity-providers:syncModeOverride"}),fieldId:"syncMode"},r.ZP.createElement(d.Qr,{name:"config.syncMode",defaultValue:v[0].toUpperCase(),control:o,render:({onChange:e,value:t})=>r.ZP.createElement(l.Ph,{toggleId:"syncMode","datatest-id":"syncmode-select",required:!0,direction:"down",onToggle:()=>E(!g),onSelect:(t,a)=>{e(a.toString().toUpperCase()),E(!1)},selections:p(`syncModes.${t.toLowerCase()}`),variant:l.TM.single,"aria-label":p("syncMode"),isOpen:g},v.map((e=>r.ZP.createElement(l.$m,{selected:e===t,key:e,"data-testid":e,value:e.toUpperCase()},p(`syncModes.${e}`)))))})),r.ZP.createElement(l.cw,{label:p("mapperType"),labelIcon:r.ZP.createElement(P.B,{helpText:t.helpText,fieldLabelId:"identity-providers:mapperType"}),fieldId:"identityProviderMapper"},r.ZP.createElement(d.Qr,{name:"identityProviderMapper",defaultValue:e[0].id,control:o,render:({onChange:a,value:n})=>r.ZP.createElement(l.Ph,{toggleId:"identityProviderMapper","data-testid":"idp-mapper-select",isDisabled:!!i,required:!0,onToggle:()=>y(!u),onSelect:(e,t)=>{const r=t;s(r),a(r.id),y(!1)},selections:t.name,variant:l.TM.single,"aria-label":p("mapperType"),isOpen:u},e.map((e=>r.ZP.createElement(l.$m,{selected:e===n,"datatest-id":e.id,key:e.name,value:e},e.name))))})))};var E=a(5954),Z=a(3172),b=a(9766),M=a(3227);function h(){const{t:e}=(0,n.$G)("identity-providers"),t=(0,d.cI)({shouldUnregister:!1}),{handleSubmit:a,register:P,errors:h}=t,{addAlert:I,addError:T}=(0,m.Z7)(),k=(0,i.k6)(),C=(0,M.Z)(),{realm:x}=(0,s.PL)(),{adminClient:L}=(0,c.K3)(),{providerId:S,alias:w}=(0,i.UO)(),{id:O}=(0,i.UO)(),[D,U]=(0,r.eJ)(),[N,J]=(0,r.eJ)(),[q,V]=(0,b.W)({titleKey:"identity-providers:deleteProviderMapper",messageKey:e("identity-providers:deleteMapperConfirm",{mapper:N?.name}),continueButtonLabel:"common:delete",continueButtonVariant:l.Wu.danger,onConfirm:async()=>{try{await L.identityProviders.delMapper({alias:w,id:O}),I(e("deleteMapperSuccess"),l.Ux.success),k.push((0,v.Q)({providerId:S,alias:w,tab:"mappers",realm:x}))}catch(e){T("identity-providers:deleteErrorError",e)}}});(0,c.ib)((()=>Promise.all([O?L.identityProviders.findOneMapper({alias:w,id:O}):null,L.identityProviders.findMapperTypes({alias:w})])),(([e,t])=>{const a=C(Object.values(t),(0,M.x)("name"));e?(J(a.find((({id:t})=>t===e.identityProviderMapper))),K(e)):J(a[0]),U(a)}),[]);const K=e=>{(0,y.Fz)(e,t.setValue),t.setValue("config.attributes",JSON.parse(e.config.attributes)),t.setValue("config.claims",JSON.parse(e.config.claims))};return D&&N?r.ZP.createElement(l.NP,{variant:"light"},r.ZP.createElement(V,null),r.ZP.createElement(p.t,{className:"kc-add-mapper-title",titleKey:e(O?"editIdPMapper":"addIdPMapper",{providerId:S[0].toUpperCase()+S.substring(1)}),dropdownItems:O?[r.ZP.createElement(l.hP,{key:"delete",onClick:q},e("common:delete"))]:void 0,divider:!0}),r.ZP.createElement(o.N,{role:"manage-identity-providers",isHorizontal:!0,onSubmit:a((async t=>{const a=(0,y.a)(t),r=JSON.stringify(t.config.attributes??[]),i=JSON.stringify(t.config.claims??[]),n={...a,config:{...a.config,attributes:r,claims:i},identityProviderAlias:w};if(O)try{await L.identityProviders.updateMapper({id:O,alias:w},{...n,name:N?.name}),I(e("mapperSaveSuccess"),l.Ux.success)}catch(t){T(e("mapperSaveError"),t)}else try{const t=await L.identityProviders.createMapper({identityProviderMapper:n,alias:w});I(e("mapperCreateSuccess"),l.Ux.success),k.push((0,u.n)({realm:x,alias:w,providerId:S,id:t.id}))}catch(t){T(e("mapperCreateError"),t)}})),className:"pf-u-mt-lg"},O&&r.ZP.createElement(l.cw,{label:e("common:id"),fieldId:"kc-mapper-id",validated:h.name?l.LD.error:l.LD.default,helperTextInvalid:e("common:required")},r.ZP.createElement(f.F,{ref:P(),type:"text",value:N.id,"datatest-id":"name-input",id:"kc-name",name:"name",isDisabled:!!O,validated:h.name?l.LD.error:l.LD.default})),N.properties&&r.ZP.createElement(r.ZP.Fragment,null,r.ZP.createElement(g,{form:t,id:O,mapperTypes:D,updateMapperType:J,mapperType:N}),r.ZP.createElement(d.RV,{...t},r.ZP.createElement(E.K,{properties:N.properties}))," "),r.ZP.createElement(l.WK,null,r.ZP.createElement(l.zx,{"data-testid":"new-mapper-save-button",variant:"primary",type:"submit"},e("common:save")),r.ZP.createElement(l.zx,{variant:"link",component:e=>r.ZP.createElement(i.rU,{...e,to:(0,v.Q)({realm:x,providerId:S,alias:w,tab:"settings"})})},e("common:cancel"))))):r.ZP.createElement(Z.g,null)}}}]);