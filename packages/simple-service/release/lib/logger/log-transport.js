"use strict";var __importDefault=this&&this.__importDefault||function(o){return o&&o.__esModule?o:{default:o}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getPrimaryTransports=exports.getExceptionTransports=exports.getWorkerTransports=exports.EnhancedConsole=exports.WorkerTransport=void 0;const winston_1=require("winston");require("winston-daily-rotate-file");const path_1=__importDefault(require("path")),net_1=__importDefault(require("net")),winston_transport_1=__importDefault(require("winston-transport")),cluster_1=require("cluster"),lodash_1=require("lodash"),triple_beam_1=require("triple-beam"),config_1=__importDefault(require("../../config/config")),{isDev,logger:{ipc,rotateOptions:{fileDir,maxSize,maxFiles,logInfoFileName,logErrorFileName,logExceptionFileName}}}=config_1.default,{DailyRotateFile}=winston_1.transports,{colorize}=winston_1.format;class WorkerTransport extends winston_transport_1.default{constructor(e){super(e);if(this.ipcReady=!1,this.ipcQueue=[],!cluster_1.isWorker)throw new Error("WorkerTransport must be used in a cluster worker.");ipc.enabled&&(this.ipcClient=net_1.default.createConnection(ipc.path),this.ipcClient.setNoDelay(),this.ipcClient.on("ready",()=>{this.ipcReady=!0,this.ipcQueue.length&&this.ipcQueue.forEach(s=>{this.ipcClient?.write(`${JSON.stringify(s.message)}
`,()=>{s.done()})})}).on("error",s=>{throw console.error(s),s}))}log(e,s=lodash_1.noop){const n={type:"log",payload:e},i=t=>{if(t){console.error(t);return}s(),setImmediate(()=>{this.emit("logged",e)})};if(ipc.enabled){if(!this.ipcReady){this.ipcQueue.push({message:n,done:i});return}this.ipcClient?.write(`${JSON.stringify(n)}
`,()=>{i(null)});return}cluster_1.worker.send(n,void 0,i)}}exports.WorkerTransport=WorkerTransport;class EnhancedConsole extends winston_transport_1.default{constructor(e={}){super(e);this.colorFormat=colorize()}log(e,s=lodash_1.noop){setImmediate(()=>{this.emit("logged",e)});const n=i=>{const t=a=>process.stdout.isTTY?this.colorFormat.colorize(e[triple_beam_1.LEVEL],a):a;let r=`level: ${t(e.level)}`;e.timestamp&&(r=`${r}
timestamp: ${t(e.timestamp)}`),e.durationMs&&(r=`${r}
durationMs: ${t(e.durationMs)}`),e.user&&(r=`${r}
user: ${t(e.user)}`),(0,lodash_1.isEmpty)(e.query)||(r=`${r}
query: ${t(e.query)}`),(0,lodash_1.isEmpty)(e.body)||(r=`${r}
body: ${t(e.body)}`),r=`${r}
message: ${t(e.message)}`,e.stack&&(r=`${r}
stack: ${t(e.stack)}`),e.remainedInfo&&(r=`${r}
remainedInfo: ${t(JSON.stringify(JSON.parse(e.remainedInfo),null,2))}`),console[i](`${r}
`)};e.level.includes("error")?n("error"):n("log"),s()}}exports.EnhancedConsole=EnhancedConsole;let workerTransports=[];const getWorkerTransports=()=>(workerTransports.length||(workerTransports=[new WorkerTransport]),workerTransports);exports.getWorkerTransports=getWorkerTransports;let exceptionTransports=[];const getExceptionTransports=()=>(exceptionTransports.length||(exceptionTransports=[new DailyRotateFile({level:"error",filename:path_1.default.join(fileDir,"exception",logExceptionFileName),maxSize,maxFiles})],isDev&&exceptionTransports.push(new EnhancedConsole({level:"debug"}))),exceptionTransports);exports.getExceptionTransports=getExceptionTransports;let primaryTransports=[];const getPrimaryTransports=()=>(primaryTransports.length||(primaryTransports=[new DailyRotateFile({level:"info",filename:path_1.default.join(fileDir,"info",logInfoFileName),maxSize,maxFiles}),new DailyRotateFile({level:"error",filename:path_1.default.join(fileDir,"error",logErrorFileName),maxSize,maxFiles})],isDev&&primaryTransports.push(new EnhancedConsole({level:"debug"}))),primaryTransports);exports.getPrimaryTransports=getPrimaryTransports;