"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.createContractNodeHandler=exports.deleteContractNodeHandler=exports.saveContractTreeReusableNodeHandler=exports.reparentContractTreeNodeHandler=exports.updateContractNodeHandler=exports.getContractNodeHandler=exports.getContractVersionsHandler=exports.deleteContractTreeHandler=exports.getContractTreeHandler=exports.getSavedNodeListHandler=exports.getContractListHandler=void 0;const middleware_1=require("../../../middleware"),model_1=require("../model"),getContractListHandler=async e=>{e.gateway.sendJSON(await model_1.contractListModel.getContractList())};exports.getContractListHandler=getContractListHandler;const getSavedNodeListHandler=async e=>{e.gateway.sendJSON(await model_1.contractListModel.getSavedNodeList())};exports.getSavedNodeListHandler=getSavedNodeListHandler,exports.getContractTreeHandler=[(0,middleware_1.validator)(e=>e.object({root:e.number().integer().required(),version:e.number().integer().required()})),async e=>{e.gateway.sendJSON(await model_1.contractTreeModel.getContractTree(e.mergedParams))}],exports.deleteContractTreeHandler=[(0,middleware_1.validator)(e=>e.object({root:e.number().integer().required()})),async e=>{e.gateway.sendJSON(await model_1.contractTreeModel.deleteContractTree(e.mergedParams))}],exports.getContractVersionsHandler=[(0,middleware_1.validator)(e=>e.object({root:e.number().integer().required()})),async e=>{e.gateway.sendJSON(await model_1.contractTreeModel.getContractVersionList(e.mergedParams))}],exports.getContractNodeHandler=[(0,middleware_1.validator)(e=>e.object({node:e.number().integer().required()})),async e=>{e.gateway.sendJSON(await model_1.contractNodeModel.getContractNode(e.mergedParams))}],exports.updateContractNodeHandler=[(0,middleware_1.validator)(e=>e.object({node:e.number().integer().required(),field:e.string().valid("Name").required(),value:e.alternatives().try(e.number(),e.string(),e.boolean()).required()})),async e=>{e.gateway.sendJSON(await model_1.contractNodeModel.updateContractNode(e.mergedParams))}],exports.reparentContractTreeNodeHandler=[(0,middleware_1.validator)(e=>e.object({position:e.string().required().valid("above","child","below"),sourceID:e.number().required(),targetID:e.number().required()})),async e=>{e.gateway.sendJSON(await model_1.contractTreeModel.reparentContractTreeNode(e.mergedParams))}],exports.saveContractTreeReusableNodeHandler=[(0,middleware_1.validator)(e=>e.object({node:e.number().required(),name:e.string().required(),type:e.string().required().valid("instance","umc")})),async e=>{e.gateway.sendJSON(await model_1.contractTreeModel.saveContractTreeReusableNode(e.mergedParams))}],exports.deleteContractNodeHandler=[(0,middleware_1.validator)(e=>e.object({node:e.number().integer().required()})),async e=>{e.gateway.sendJSON(await model_1.contractNodeModel.deleteContractNode(e.mergedParams))}],exports.createContractNodeHandler=[(0,middleware_1.validator)(e=>e.object({name:e.string().allow("").max(100).optional(),type:e.string().required().valid("contract","subcontract","reroute","charge"),sourceType:e.string().required().valid("instance","umc"),parent:e.number().integer().optional()})),async e=>{e.gateway.sendJSON(await model_1.contractNodeModel.createContractNode(e.mergedParams))}];