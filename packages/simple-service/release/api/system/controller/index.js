"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.assignPermissionsHandler=exports.getAssignedPermissionsHandler=exports.deleteRoleHandler=exports.reparentRoleHandler=exports.updateRoleHandler=exports.createRoleHandler=exports.getAvailableRolesHandler=exports.getRolesHandler=exports.deletePermissionHandler=exports.reparentPermissionHandler=exports.updatePermissionHandler=exports.createPermissionHandler=exports.getPermissionsHandler=exports.getUserLoginHistoryListHandler=exports.deleteUserHandler=exports.editUserHandler=exports.createUserHandler=exports.getUserListHandler=exports.saveUserProfileHandler=exports.getUserAvatarHandler=exports.getInfoHandler=void 0;const model_1=require("../model"),config_1=__importDefault(require("../../../config")),middleware_1=require("../../../middleware"),maxStrLen=config_1.default.auth.maxStrLen,getInfoHandler=async e=>{const r=await model_1.systemModel.getInfo(e.state);e.gateway.sendJSON(r)};exports.getInfoHandler=getInfoHandler;const getUserAvatarHandler=async e=>{const r=await model_1.userModel.getUserAvatar(e.state);e.gateway.sendJSON(r)};exports.getUserAvatarHandler=getUserAvatarHandler,exports.saveUserProfileHandler=[(0,middleware_1.validator)(e=>e.object({photo:e.string().optional().allow(null).max(1024*1024*256),displayName:e.string().max(maxStrLen)})),async e=>{const r=await model_1.userModel.saveUserProfile(e.mergedParams,e.state.user.id);e.gateway.sendJSON(r)}],exports.getUserListHandler=[(0,middleware_1.validatePagination)({sorter:["created_at","updated_at"],format:{like:["email"]}}),async e=>{const r=await model_1.userModel.getUserList(e.validatorFormattedData);e.gateway?.sendJSON?.(r)}],exports.createUserHandler=[(0,middleware_1.validator)(e=>e.object({email:e.string().email().max(maxStrLen),displayName:e.string().max(maxStrLen),enabled:e.boolean(),roleId:e.number().integer().optional(),password:e.string().max(maxStrLen)})),(0,middleware_1.validateEmailDomains)(),async e=>{await model_1.userModel.createUser(e.mergedParams,e.i18n),e.gateway.sendJSON({done:!0})}],exports.editUserHandler=[(0,middleware_1.validator)(e=>e.object({id:e.alternatives().try(e.array().items(e.number().integer()),e.number().integer()),type:e.string().valid("edit","password","assignRole"),enabled:e.boolean().optional(),roleId:e.number().integer().optional(),displayName:e.string().max(maxStrLen).optional(),password:e.string().max(maxStrLen).optional()})),(0,middleware_1.validateEmailDomains)(),async e=>{await model_1.userModel.editUser(e.mergedParams,e.i18n),e.gateway.sendJSON({done:!0})}],exports.deleteUserHandler=[(0,middleware_1.validator)(e=>e.object({id:e.number().integer()})),async e=>{await model_1.userModel.deleteUser(e.mergedParams,e.i18n),e.gateway.sendJSON({done:!0})}],exports.getUserLoginHistoryListHandler=[(0,middleware_1.validatePagination)({sorter:["created_at","updated_at"],format:{like:["email","ip"]}}),async e=>{const r=await model_1.userModel.getUserLoginHistoryList(e.validatorFormattedData);e.gateway?.sendJSON?.(r)}];const getPermissionsHandler=async e=>{const r=await model_1.permissionModel.getPermissions();e.gateway?.sendJSON?.(r)};exports.getPermissionsHandler=getPermissionsHandler,exports.createPermissionHandler=[(0,middleware_1.validator)(e=>e.object({targetId:e.number().integer(),position:e.string().valid("above","child","below"),type:e.string().valid("category","permission"),name:e.string(),description:e.string()})),async e=>{const r=await model_1.permissionModel.createPermission(e.mergedParams);e.gateway?.sendJSON?.(r)}],exports.updatePermissionHandler=[(0,middleware_1.validator)(e=>e.object({id:e.number().integer(),type:e.string().valid("category","permission").optional(),name:e.string().optional(),description:e.string().optional()})),async e=>{const r=await model_1.permissionModel.updatePermission(e.mergedParams);e.gateway?.sendJSON?.(r)}],exports.reparentPermissionHandler=[(0,middleware_1.validator)(e=>e.object({targetId:e.number().integer(),sourceId:e.number().integer(),position:e.string().valid("above","child","below")})),async e=>{const r=await model_1.permissionModel.reparentPermission(e.mergedParams);e.gateway?.sendJSON?.(r)}],exports.deletePermissionHandler=[(0,middleware_1.validator)(e=>e.object({id:e.number().integer()})),async e=>{const r=await model_1.permissionModel.deletePermission(e.mergedParams);e.gateway?.sendJSON?.(r)}];const getRolesHandler=async e=>{const r=await model_1.roleModel.getRoles();e.gateway?.sendJSON?.(r)};exports.getRolesHandler=getRolesHandler;const getAvailableRolesHandler=async e=>{const r=await model_1.roleModel.getAvailableRoles();e.gateway?.sendJSON?.(r)};exports.getAvailableRolesHandler=getAvailableRolesHandler,exports.createRoleHandler=[(0,middleware_1.validator)(e=>e.object({targetId:e.number().integer(),position:e.string().valid("above","child","below"),enabled:e.boolean(),name:e.string(),description:e.string()})),async e=>{const r=await model_1.roleModel.createRole(e.mergedParams);e.gateway?.sendJSON?.(r)}],exports.updateRoleHandler=[(0,middleware_1.validator)(e=>e.object({id:e.number().integer(),enabled:e.boolean().optional(),name:e.string().optional(),description:e.string().optional()})),async e=>{const r=await model_1.roleModel.updateRole(e.mergedParams);e.gateway?.sendJSON?.(r)}],exports.reparentRoleHandler=[(0,middleware_1.validator)(e=>e.object({targetId:e.number().integer(),sourceId:e.number().integer(),position:e.string().valid("above","child","below")})),async e=>{const r=await model_1.roleModel.reparentRole(e.mergedParams);e.gateway?.sendJSON?.(r)}],exports.deleteRoleHandler=[(0,middleware_1.validator)(e=>e.object({id:e.number().integer()})),async e=>{const r=await model_1.roleModel.deleteRole(e.mergedParams);e.gateway?.sendJSON?.(r)}],exports.getAssignedPermissionsHandler=[(0,middleware_1.validator)(e=>e.object({id:e.number().integer()})),async e=>{const r=await model_1.roleModel.getAssignedPermissions(e.mergedParams);e.gateway?.sendJSON?.(r)}],exports.assignPermissionsHandler=[(0,middleware_1.validator)(e=>e.object({id:e.number().integer(),permissionIds:e.array().items(e.number().integer())})),async e=>{const r=await model_1.roleModel.assignPermissions(e.mergedParams);e.gateway?.sendJSON?.(r)}];